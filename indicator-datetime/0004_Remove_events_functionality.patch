--- a/configure.ac
+++ b/configure.ac
@@ -52,8 +52,6 @@
 DBUSMENUGTK_REQUIRED_VERSION=0.5.90
 GIO_REQUIRED_VERSION=2.25.11
 INDICATOR_DISPLAY_OBJECTS=0.2.2
-ECAL_REQUIRED_VERSION=3.5
-EDS_REQUIRED_VERSION=3.5
 ICAL_REQUIRED_VERSION=0.48
 CAIRO_REQUIRED_VERSION=1.10
 GDK_REQUIRED_VERSION=2.22
@@ -72,10 +70,7 @@
                            dbusmenu-gtk3-0.4 >= $DBUSMENUGTK_REQUIRED_VERSION
                            libido3-0.1 >= $INDICATOR_DISPLAY_OBJECTS
                            gio-2.0 >= $GIO_REQUIRED_VERSION
-                           libecal-1.2 >= $ECAL_REQUIRED_VERSION
                            libical >= $ICAL_REQUIRED_VERSION
-                           libedataserver-1.2 >= EDS_REQUIRED_VERSION
-                           libedataserverui-3.0 >= EDS_REQUIRED_VERSION
                            cairo >= CAIRO_REQUIRED_VERSION
                            gdk-3.0 >= GDK_REQUIRED_VERSION)
 
--- a/data/com.canonical.indicator.datetime.gschema.xml
+++ b/data/com.canonical.indicator.datetime.gschema.xml
@@ -78,12 +78,5 @@
 			  Shows the week numbers in the monthly calendar in indicator-datetime's menu.
 			</description>
 		</key>
-		<key name="show-events" type="b">
-			<default>true</default>
-			<summary>Show events in the indicator</summary>
-			<description>
-			  Shows events from Evolution in indicator-datetime's menu.
-			</description>
-		</key>
 	</schema>
 </schemalist>
--- a/data/datetime-dialog.ui
+++ b/data/datetime-dialog.ui
@@ -264,33 +264,6 @@
                             <property name="position">2</property>
                           </packing>
                         </child>
-                        <child>
-                          <object class="GtkCheckButton" id="showEventsCheck">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="use_underline">True</property>
-                            <property name="xalign">0</property>
-                            <property name="draw_indicator">True</property>
-                            <child>
-                              <object class="GtkLabel" id="label12">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="label" translatable="yes">Coming _events from Evolution Calendar</property>
-                                <property name="use_underline">True</property>
-                                <property name="wrap">True</property>
-                                <property name="mnemonic_widget">showEventsCheck</property>
-                              </object>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">3</property>
-                          </packing>
-                        </child>
                       </object>
                       <packing>
                         <property name="expand">True</property>
--- a/src/datetime-prefs.c
+++ b/src/datetime-prefs.c
@@ -169,18 +169,11 @@
                    "active", G_SETTINGS_BIND_DEFAULT);
   g_settings_bind (conf, SETTINGS_SHOW_WEEK_NUMBERS_S, WIG ("includeWeekNumbersCheck"),
                    "active", G_SETTINGS_BIND_DEFAULT);
-  g_settings_bind (conf, SETTINGS_SHOW_EVENTS_S, WIG ("showEventsCheck"),
-                   "active", G_SETTINGS_BIND_DEFAULT);
 
   /* Set up sensitivities */
   add_widget_dependency (WIG ("showCalendarCheck"), WIG ("calendarOptions"));
   add_widget_dependency (WIG ("showClockCheck"), WIG ("clockOptions"));
 
-  /* Hacky proxy test for whether evolution-data-server is installed */
-  gchar * evo_path = g_find_program_in_path ("evolution");
-  gtk_widget_set_sensitive (WIG ("showEventsCheck"), (evo_path != NULL));
-  g_free (evo_path);
-
   GtkWidget * panel = WIG ("timeDatePanel");
 
 #undef WIG
--- a/src/datetime-service.c
+++ b/src/datetime-service.c
@@ -36,9 +36,7 @@
 #include <libdbusmenu-glib/menuitem.h>
 
 #include <time.h>
-#include <libecal/libecal.h>
 #include <libical/ical.h>
-#include <libedataserver/libedataserver.h>
 // Other users of ecal seem to also include these, not sure why they should be included by the above
 #include <libical/icaltime.h>
 #include <cairo/cairo.h>
@@ -52,8 +50,6 @@
 /* how often to check for clock skew */
 #define SKEW_CHECK_INTERVAL_SEC 10
 
-#define MAX_APPOINTMENT_MENUITEMS 5
-
 #define SKEW_DIFF_THRESHOLD_SEC (SKEW_CHECK_INTERVAL_SEC + 5)
 
 #ifdef HAVE_CCPANEL
@@ -62,7 +58,6 @@
  #define SETTINGS_APP_INVOCATION "gnome-control-center datetime"
 #endif
 
-static gboolean update_appointment_menu_items (gpointer user_data);
 static void day_timer_reset (void);
 static gboolean get_greeter_mode (void);
 
@@ -76,27 +71,13 @@
 static DbusmenuMenuitem * date = NULL;
 static DbusmenuMenuitem * calendar = NULL;
 static DbusmenuMenuitem * settings = NULL;
-static DbusmenuMenuitem * events_separator = NULL;
 static DbusmenuMenuitem * locations_separator = NULL;
-static DbusmenuMenuitem * add_appointment = NULL;
-static DbusmenuMenuitem * appointments[MAX_APPOINTMENT_MENUITEMS];
-static GList            * comp_instances = NULL;
-static gboolean           updating_appointments = FALSE;
 static time_t             start_time_appointments = (time_t) 0;
 static GSettings        * conf = NULL;
-static ESourceRegistry  * source_registry = NULL;
-static GList            * appointment_sources = NULL;
 
 
 static gchar 			* current_timezone = NULL;
 
-struct comp_instance {
-        ECalComponent *comp;
-        time_t start;
-        time_t end;
-        ESource *source;
-};
-
 /* Update the current timezone */
 static void
 update_current_timezone (void) {
@@ -167,26 +148,6 @@
 }
 
 static gboolean
-update_appointment_menu_items_idle (gpointer user_data)
-{
-	update_appointment_menu_items(user_data);
-	return FALSE;
-}
-
-static void
-hide_all_appointments (void)
-{
-	int i;
-
-	for (i=0; i<MAX_APPOINTMENT_MENUITEMS; i++) {
-		if (appointments[i]) {
-			dbusmenu_menuitem_property_set_bool(appointments[i], DBUSMENU_MENUITEM_PROP_ENABLED, FALSE);
-			dbusmenu_menuitem_property_set_bool(appointments[i], DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
-		}
-	}
-}
-
-static gboolean
 month_changed_cb (DbusmenuMenuitem * menuitem, gchar *name, GVariant *variant, guint timestamp)
 {
 	start_time_appointments = (time_t)g_variant_get_uint32(variant);
@@ -198,7 +159,6 @@
 	   user. */
 	dbusmenu_menuitem_property_remove(menuitem, CALENDAR_MENUITEM_PROP_MARKS);
 
-	g_idle_add(update_appointment_menu_items_idle, NULL);
 	return TRUE;
 }
 
@@ -230,91 +190,10 @@
 	start_time_appointments = new_time;
 
 	g_debug("Received day-selected with timestamp: %d -> %s",(int)start_time_appointments, ctime(&start_time_appointments));	
-	g_idle_add(update_appointment_menu_items_idle, NULL);
-
-	return TRUE;
-}
-
-static gboolean
-day_selected_double_click_cb (DbusmenuMenuitem * menuitem  G_GNUC_UNUSED,
-                              gchar            * name      G_GNUC_UNUSED,
-                              GVariant         * variant,
-                              guint              timestamp G_GNUC_UNUSED)
-{
-	const time_t evotime = (time_t)g_variant_get_uint32(variant);
-	
-	g_debug("Received day-selected-double-click with timestamp: %d -> %s",(int)evotime, ctime(&evotime));	
-	
-	gchar *ad = isodate_from_time_t(evotime);
-	gchar *cmd = g_strconcat("evolution calendar:///?startdate=", ad, NULL);
-	
-	execute_command (cmd);
 
-	g_free (cmd);
-	g_free (ad);
-	
 	return TRUE;
 }
 
-static guint ecaltimer = 0;
-
-static void
-start_ecal_timer(void)
-{
-	if (ecaltimer != 0) {
-		g_source_remove(ecaltimer);
-		ecaltimer = 0;
-	}
-	if (update_appointment_menu_items(NULL))
-		ecaltimer = g_timeout_add_seconds(60*5, update_appointment_menu_items, NULL); 	
-}
-
-static void
-stop_ecal_timer(void)
-{
-	if (ecaltimer != 0) {
-		g_source_remove(ecaltimer);
-		ecaltimer = 0;
-	}
-}
-static gboolean
-idle_start_ecal_timer (gpointer data)
-{
-	start_ecal_timer();
-	return FALSE;
-}
-
-static void
-show_events_changed (void)
-{
-	if (g_settings_get_boolean(conf, SETTINGS_SHOW_EVENTS_S)) {
-		dbusmenu_menuitem_property_set_bool(add_appointment, DBUSMENU_MENUITEM_PROP_VISIBLE, TRUE);
-		dbusmenu_menuitem_property_set_bool(events_separator, DBUSMENU_MENUITEM_PROP_VISIBLE, TRUE);
-		start_ecal_timer();
-	} else {
-		dbusmenu_menuitem_property_set_bool(add_appointment, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
-		dbusmenu_menuitem_property_set_bool(events_separator, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
-		hide_all_appointments ();
-		stop_ecal_timer();
-	}
-}
-
-static gboolean
-calendar_app_is_usable (void)
-{
-	/* confirm that it's installed... */
-	gchar *evo = g_find_program_in_path("evolution");
-	if (evo == NULL)
-		return FALSE;
-	g_debug ("found calendar app: '%s'", evo);
-	g_free (evo);
-
-	/* see if there are any calendar sources */
-	return appointment_sources > 0;
-}
-
-/* Looks for the calendar application and enables the item if
-   we have one, starts ecal timer if events are turned on */
 static gboolean
 check_for_calendar (gpointer user_data)
 {
@@ -322,54 +201,10 @@
 	
 	dbusmenu_menuitem_property_set_bool(date, DBUSMENU_MENUITEM_PROP_ENABLED, TRUE);
 	
-	if (!get_greeter_mode () && calendar_app_is_usable()) {
-
-		int i;
-		int pos = 2;
-		
-		g_signal_connect (G_OBJECT(date), DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED,
-		                  G_CALLBACK (activate_cb), "evolution -c calendar");
-		
-		events_separator = dbusmenu_menuitem_new();
-		dbusmenu_menuitem_property_set(events_separator, DBUSMENU_MENUITEM_PROP_TYPE, DBUSMENU_CLIENT_TYPES_SEPARATOR);
-		dbusmenu_menuitem_child_add_position(root, events_separator, pos++);
-
-		for (i=0; i<MAX_APPOINTMENT_MENUITEMS; i++)
-		{
-			DbusmenuMenuitem * item = dbusmenu_menuitem_new();
-			dbusmenu_menuitem_property_set (item, DBUSMENU_MENUITEM_PROP_TYPE, APPOINTMENT_MENUITEM_TYPE);
-			dbusmenu_menuitem_property_set_bool (item, DBUSMENU_MENUITEM_PROP_ENABLED, TRUE);
-			dbusmenu_menuitem_property_set_bool (item, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
-			appointments[i] = item;
-			dbusmenu_menuitem_child_add_position(root, item, pos++);
-		}
-
-		add_appointment = dbusmenu_menuitem_new();
-		dbusmenu_menuitem_property_set (add_appointment, DBUSMENU_MENUITEM_PROP_LABEL, _("Add Event…"));
-		dbusmenu_menuitem_property_set_bool(add_appointment, DBUSMENU_MENUITEM_PROP_ENABLED, TRUE);
-		g_signal_connect(G_OBJECT(add_appointment), DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED, G_CALLBACK(activate_cb), "evolution -c calendar");
-		dbusmenu_menuitem_child_add_position (root, add_appointment, pos++);
-
-		if (g_settings_get_boolean(conf, SETTINGS_SHOW_EVENTS_S)) {
-			dbusmenu_menuitem_property_set_bool(add_appointment, DBUSMENU_MENUITEM_PROP_VISIBLE, TRUE);
-			dbusmenu_menuitem_property_set_bool(events_separator, DBUSMENU_MENUITEM_PROP_VISIBLE, TRUE);
-			g_idle_add((GSourceFunc)idle_start_ecal_timer, NULL);
-		} else {
-			dbusmenu_menuitem_property_set_bool(add_appointment, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
-			dbusmenu_menuitem_property_set_bool(events_separator, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
-			stop_ecal_timer();
-		}
-		
+	if (!get_greeter_mode ()) {
 		// Connect to calendar events
 		g_signal_connect(calendar, "event::month-changed", G_CALLBACK(month_changed_cb), NULL);
 		g_signal_connect(calendar, "event::day-selected", G_CALLBACK(day_selected_cb), NULL);
-		g_signal_connect(calendar, "event::day-selected-double-click", G_CALLBACK(day_selected_double_click_cb), NULL);
-	} else {
-		g_debug("Unable to find calendar app.");
-		if (add_appointment != NULL)
-			dbusmenu_menuitem_property_set_bool(add_appointment, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
-		if (events_separator != NULL)
-			dbusmenu_menuitem_property_set_bool(events_separator, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
 	}
 	
 	if (g_settings_get_boolean(conf, SETTINGS_SHOW_CALENDAR_S)) {
@@ -383,375 +218,6 @@
 	return FALSE;
 }
 
-static gint
-compare_comp_instances (gconstpointer ga, gconstpointer gb)
-{
-	const struct comp_instance * a = ga;
-	const struct comp_instance * b = gb;
-
-	/* sort by start time */
-	if (a->start < b->start) return -1;
-	if (a->start > b->start) return  1;
-	return 0;
-}
-
-static struct comp_instance*
-comp_instance_new (ECalComponent * comp, time_t start, time_t end, ESource * source)
-{
-	g_debug("Using times start %s, end %s", ctime(&start), ctime(&end));
-
-	struct comp_instance *ci = g_new (struct comp_instance, 1);
-	ci->comp = g_object_ref (comp);
-	ci->source = source;
-	ci->start = start;
-	ci->end = end;
-	return ci;
-}
-static void
-comp_instance_free (struct comp_instance* ci)
-{
-	if (ci != NULL) {
-		g_clear_object (&ci->comp);
-		g_free (ci);
-	}
-}
-
-static gboolean
-populate_appointment_instances (ECalComponent * comp,
-                                time_t          start,
-                                time_t          end,
-                                gpointer        data)
-{
-	const ECalComponentVType vtype = e_cal_component_get_vtype (comp);
-
-	if ((vtype == E_CAL_COMPONENT_EVENT) || (vtype == E_CAL_COMPONENT_TODO))
-	{
-		icalproperty_status status;
-		e_cal_component_get_status (comp, &status);
-
-		if ((status != ICAL_STATUS_COMPLETED) && (status != ICAL_STATUS_CANCELLED))
-		{
-			gchar * str = e_cal_component_get_as_string (comp);
-			g_debug("Appending item %s", str);
-			struct comp_instance *ci = comp_instance_new (comp, start, end, E_SOURCE(data));
-			comp_instances = g_list_append (comp_instances, ci);
-			g_free (str);
-		}
-	}
-
-	return TRUE; /* tell eds to keep iterating */
-}
-
-/* Populate the menu with todays, next 5 appointments. 
- * we should hook into the ABOUT TO SHOW signal and use that to update the appointments.
- * Experience has shown that caldav's and webcals can be slow to load from eds
- * this is a problem mainly on the EDS side of things, not ours. 
- */
-static gboolean
-update_appointment_menu_items (gpointer user_data __attribute__ ((unused)))
-{
-	// FFR: we should take into account short term timers, for instance
-	// tea timers, pomodoro timers etc... that people may add, this is hinted to in the spec.
-	g_debug("Update appointments called");
-	if (calendar == NULL) return FALSE;
-	if (!g_settings_get_boolean(conf, SETTINGS_SHOW_EVENTS_S)) return FALSE;
-	if (updating_appointments) return TRUE;
-	updating_appointments = TRUE;
-	
-	time_t curtime = 0, t1 = 0, t2 = 0;
-	GList *l, *s;
-	GError *gerror = NULL;
-	gint i;
-	gint width = 0, height = 0;
-	GList * sources = NULL;
-
-	// Get today & work out query times
-	time(&curtime);
-	struct tm *today = localtime(&curtime);
-	const int mday = today->tm_mday;
-	const int mon = today->tm_mon;
-	const int year = today->tm_year;
-
-	int start_month_saved = mon;
-
-  	struct tm *start_tm = NULL;
-	int this_year = today->tm_year + 1900;
-	int days[12]={31,28,31,30,31,30,31,31,30,31,30,31};
-	if ((this_year % 400 == 0) || (this_year % 100 > 0 && this_year % 4 == 0)) days[1] = 29;
-	
-	int highlightdays = days[mon] - mday + 1;
-	t1 = curtime; // By default the current time is the appointment start time. 
-	
-	if (start_time_appointments > 0) {
-  		start_tm = localtime(&start_time_appointments);
-		int start_month = start_tm->tm_mon;
-		start_month_saved = start_month;
-		int start_year = start_tm->tm_year + 1900;
-		if ((start_month != mon) || (start_year != this_year)) {
-			// Set t1 to the start of that month.
-			struct tm month_start = {0};
-			month_start.tm_year = start_tm->tm_year;
-			month_start.tm_mon = start_tm->tm_mon;
-			month_start.tm_mday = 1;
-			t1 = mktime(&month_start);
-			highlightdays = days[start_month];
-		}
-	}
-	
-	g_debug("Will highlight %d days from %s", highlightdays, ctime(&t1));
-
-	highlightdays = highlightdays + 7; // Minimum of 7 days ahead 
-	t2 = t1 + (time_t) (highlightdays * 24 * 60 * 60);
-	
-	// clear any previous comp_instances
-	g_list_free_full (comp_instances, (GDestroyNotify)comp_instance_free);
-	comp_instances = NULL;
-
-	// Generate instances for all sources
-	for (s=appointment_sources; s!=NULL; s=s->next) {
-
-               ESource *source = E_SOURCE (s->data);
-               ECalClient *ecal = e_cal_client_new(source, E_CAL_CLIENT_SOURCE_TYPE_EVENTS, &gerror);
-
-	       if (!ecal) {
-			g_debug ("Cannot create ecal client: %s", gerror->message);
-			g_clear_error (&gerror);
-			continue;
-	       }
-
-               icaltimezone* current_zone = icaltimezone_get_builtin_timezone(current_timezone);
-               if (!current_zone) {
-                       // current_timezone may be a TZID?
-                       current_zone = icaltimezone_get_builtin_timezone_from_tzid(current_timezone);
-               }
-
-               e_cal_client_set_default_timezone (ecal, current_zone);
-
-               g_debug("Checking if source %s is enabled", e_source_get_uid(source));
-               if (e_source_get_enabled (source)) {
-                       g_debug("source is enabled, generating instances");
-
-                       if (!e_client_open_sync (E_CLIENT (ecal), TRUE, NULL, &gerror)) {
-                               g_debug("Failed to open source: %s", gerror->message);
-				g_clear_error (&gerror);
-				g_object_unref(ecal);
-				continue;
-			}
-
-                       e_cal_client_generate_instances_sync (ecal,
-                                                             t1,
-                                                             t2,
-                                                             populate_appointment_instances,
-                                                             source);
-               }
-               g_object_unref(ecal);
-       }
-
-	g_debug("Number of ECalComponents returned: %d", g_list_length(comp_instances));
-	GList *sorted_comp_instances = g_list_sort(comp_instances, compare_comp_instances);
-	comp_instances = NULL;
-	g_debug("Components sorted");
-
-	hide_all_appointments ();	
-
-	gtk_icon_size_lookup(GTK_ICON_SIZE_MENU, &width, &height);
-	if (width <= 0) width = 12;
-	if (height <= 0) height = 12;
-	if (width > 30) width = 12;
-	if (height > 30) height = 12;
-	
-	gchar *time_format_str = g_settings_get_string(conf, SETTINGS_TIME_FORMAT_S);
-	gint apt_output;
-	if (g_strcmp0(time_format_str, "12-hour") == 0) {
-		apt_output = SETTINGS_TIME_12_HOUR;
-	} else if (g_strcmp0(time_format_str, "24-hour") == 0) {
-		apt_output = SETTINGS_TIME_24_HOUR;
-	} else if (is_locale_12h()) {
-		apt_output = SETTINGS_TIME_12_HOUR;
-	} else {
-		apt_output = SETTINGS_TIME_24_HOUR;
-	}
-	g_free (time_format_str);
-	
-	GVariantBuilder markeddays;
-	g_variant_builder_init (&markeddays, G_VARIANT_TYPE ("ai"));
-	
-	i = 0;
-	for (l = sorted_comp_instances; l; l = l->next) {
-		struct comp_instance *ci = l->data;
-		ECalComponent *ecalcomp = ci->comp;
-		char right[20];
-		//const gchar *uri;
-		DbusmenuMenuitem * item;
-		
-		ECalComponentVType vtype = e_cal_component_get_vtype (ecalcomp);
-		struct tm due_data = {0};
-		struct tm *due = NULL;
-		if (vtype == E_CAL_COMPONENT_EVENT) due = localtime_r(&ci->start, &due_data);
-		else if (vtype == E_CAL_COMPONENT_TODO) due = localtime_r(&ci->end, &due_data);
-		else continue;
-		
-		const int dmday = due->tm_mday;
-		const int dmon = due->tm_mon;
-		const int dyear = due->tm_year;
-		
-		if (start_month_saved == dmon) {
-			// Mark day if our query hasn't hit the next month. 
-			g_debug("Adding marked date %s, %d", ctime(&ci->start), dmday);
-			g_variant_builder_add (&markeddays, "i", dmday);
-		}
-		
-		// If the appointment time is less than the selected date, 
-		// don't create an appointment item for it.
-		if (vtype == E_CAL_COMPONENT_EVENT) {
-			if (ci->start < start_time_appointments) continue;
-		} else if (vtype == E_CAL_COMPONENT_TODO) {
-			if (ci->end < start_time_appointments) continue;
-		}
-	
-		if (i >= MAX_APPOINTMENT_MENUITEMS)
-			continue;
-
-		item = appointments[i];
-		i++;
-
-		/* Remove the icon as we might not replace it on error */
-		dbusmenu_menuitem_property_remove(item, APPOINTMENT_MENUITEM_PROP_ICON);
-
-		/* Remove the activate handler */
-		g_signal_handlers_disconnect_matched(G_OBJECT(item), G_SIGNAL_MATCH_FUNC, 0, 0, NULL, G_CALLBACK(activate_cb), NULL);
-
-		dbusmenu_menuitem_property_set_bool  (item, DBUSMENU_MENUITEM_PROP_ENABLED, TRUE);
-		dbusmenu_menuitem_property_set_bool  (item, DBUSMENU_MENUITEM_PROP_VISIBLE, TRUE);
-
-	
-        // Label text        
-		ECalComponentText valuetext;
-		e_cal_component_get_summary (ecalcomp, &valuetext);
-		const gchar * summary = valuetext.value;
-		g_debug("Summary: %s", summary);
-		dbusmenu_menuitem_property_set (item, APPOINTMENT_MENUITEM_PROP_LABEL, summary);
-
-		gboolean full_day = FALSE;
-		if (vtype == E_CAL_COMPONENT_EVENT) {
-			time_t start = ci->start;
-			if (time_add_day(start, 1) == ci->end) {
-				full_day = TRUE;
-			}
-		}
-
-		// Due text
-		if (full_day) {
-			struct tm fulldaytime = {0};
-			localtime_r(&ci->start, &fulldaytime);
-
-			/* TRANSLATORS: This is a strftime string for the day for full day events
-			   in the menu.  It should most likely be either '%A' for a full text day
-			   (Wednesday) or '%a' for a shortened one (Wed).  You should only need to
-			   change for '%a' in the case of langauges with very long day names. */
-			strftime(right, 20, _("%A"), &fulldaytime);
-		} else {
-			if (apt_output == SETTINGS_TIME_12_HOUR) {
-				if ((mday == dmday) && (mon == dmon) && (year == dyear))
-					strftime(right, 20, _(DEFAULT_TIME_12_FORMAT), due);
-				else
-					strftime(right, 20, _(DEFAULT_TIME_12_FORMAT_WITH_DAY), due);
-			} else if (apt_output == SETTINGS_TIME_24_HOUR) {
-				if ((mday == dmday) && (mon == dmon) && (year == dyear))
-					strftime(right, 20, _(DEFAULT_TIME_24_FORMAT), due);
-				else
-					strftime(right, 20, _(DEFAULT_TIME_24_FORMAT_WITH_DAY), due);
-			}
-		}
-		g_debug("Appointment time: %s, for date %s", right, asctime(due));
-		dbusmenu_menuitem_property_set (item, APPOINTMENT_MENUITEM_PROP_RIGHT, right);
-		
-		// Now we pull out the URI for the calendar event and try to create a URI that'll work when we execute evolution
-		// FIXME Because the URI stuff is really broken, we're going to open the calendar at todays date instead
-		//e_cal_component_get_uid(ecalcomp, &uri);
-		gchar * ad = isodate_from_time_t(mktime(due));
-		gchar * cmd = g_strconcat("evolution calendar:///?startdate=", ad, NULL);
-		g_debug("Command to Execute: %s", cmd);
-		g_signal_connect_data (G_OBJECT(item), DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED,
-		                       G_CALLBACK(activate_cb), cmd, (GClosureNotify)g_free, 0);
-		g_free (ad);
-
-	const gchar *color_spec = e_source_selectable_get_color (e_source_get_extension (ci->source, E_SOURCE_EXTENSION_CALENDAR));
-        g_debug("Colour to use: %s", color_spec);
-			
-		// Draw the correct icon for the appointment type and then tint it using mask fill.
-		// For now we'll create a circle
-        if (color_spec != NULL) {
-        	g_debug("Creating a cairo surface: size, %d by %d", width, height);         
-        	cairo_surface_t *surface = cairo_image_surface_create( CAIRO_FORMAT_ARGB32, width, height ); 
-			cairo_t *cr = cairo_create(surface);
-        	GdkRGBA rgba;
-        	if (gdk_rgba_parse (&rgba, color_spec))
-        		gdk_cairo_set_source_rgba (cr, &rgba);
-			cairo_paint(cr);
-    		cairo_set_source_rgba(cr, 0,0,0,0.5);
-    		cairo_set_line_width(cr, 1);
-    		cairo_rectangle (cr, 0.5, 0.5, width-1, height-1);
-    		cairo_stroke(cr);
-			// Convert to pixbuf, in gtk3 this is done with gdk_pixbuf_get_from_surface
-			cairo_content_t content = cairo_surface_get_content (surface) | CAIRO_CONTENT_COLOR;
-			GdkPixbuf *pixbuf = gdk_pixbuf_new (GDK_COLORSPACE_RGB, 
-			                                    !!(content & CAIRO_CONTENT_ALPHA), 
-			                                    8, width, height);
-			if (pixbuf != NULL) {               
-				gint sstride = cairo_image_surface_get_stride( surface ); 
-				gint dstride = gdk_pixbuf_get_rowstride (pixbuf);
-				guchar *spixels = cairo_image_surface_get_data( surface );
-				guchar *dpixels = gdk_pixbuf_get_pixels (pixbuf);
-
-	  			int x, y;
-	  			for (y = 0; y < height; y++) {
-					guint32 *src = (guint32 *) spixels;
-
-					for (x = 0; x < width; x++) {
-						guint alpha = src[x] >> 24;
-
-						if (alpha == 0) {
-		      				dpixels[x * 4 + 0] = 0;
-		      				dpixels[x * 4 + 1] = 0;
-		      				dpixels[x * 4 + 2] = 0;
-		    			} else {
-							dpixels[x * 4 + 0] = (((src[x] & 0xff0000) >> 16) * 255 + alpha / 2) / alpha;
-							dpixels[x * 4 + 1] = (((src[x] & 0x00ff00) >>  8) * 255 + alpha / 2) / alpha;
-							dpixels[x * 4 + 2] = (((src[x] & 0x0000ff) >>  0) * 255 + alpha / 2) / alpha;
-						}
-						dpixels[x * 4 + 3] = alpha;
-					}
-					spixels += sstride;
-					dpixels += dstride;
-	  			}
-	  			
-				dbusmenu_menuitem_property_set_image (item, APPOINTMENT_MENUITEM_PROP_ICON, pixbuf);
-				g_clear_object (&pixbuf);
-			} else {
-				g_debug("Creating pixbuf from surface failed");
-			}
-			cairo_surface_destroy (surface);
-			cairo_destroy(cr);
-		}
-		g_debug("Adding appointment: %p", item);
-	}
-	
-	g_clear_error (&gerror);
-
-	g_list_free_full (sorted_comp_instances, (GDestroyNotify)comp_instance_free);
-	sorted_comp_instances = NULL;
-	
-	GVariant * marks = g_variant_builder_end (&markeddays);
-	dbusmenu_menuitem_property_set_variant (calendar, CALENDAR_MENUITEM_PROP_MARKS, marks);
-
-	g_clear_object (&sources);
-	
-	updating_appointments = FALSE;
-	g_debug("End of objects");
-	return TRUE;
-}
-
 /* Looks for the time and date admin application and enables the
    item we have one */
 static gboolean
@@ -772,12 +238,6 @@
 	return FALSE;
 }
 
-static void
-time_format_changed (void)
-{
-	update_appointment_menu_items(NULL);
-}
-
 /* Does the work to build the default menu, really calls out
    to other functions but this is the core to clean up the
    main function. */
@@ -799,8 +259,6 @@
 		dbusmenu_menuitem_property_set (calendar, DBUSMENU_MENUITEM_PROP_TYPE, DBUSMENU_CALENDAR_MENUITEM_TYPE);
 		/* insensitive until we check for available apps */
 		dbusmenu_menuitem_property_set_bool(calendar, DBUSMENU_MENUITEM_PROP_ENABLED, FALSE);
-		g_signal_connect (G_OBJECT(calendar), DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED,
-						  G_CALLBACK (activate_cb), "evolution -c calendar");
 		dbusmenu_menuitem_child_append(root, calendar);
 
 		g_idle_add(check_for_calendar, NULL);
@@ -812,9 +270,6 @@
 		dbusmenu_menuitem_property_set_bool (locations_separator, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
 		dbusmenu_menuitem_child_append(root, locations_separator);
 
-		g_signal_connect (conf, "changed::" SETTINGS_SHOW_EVENTS_S, G_CALLBACK (show_events_changed), NULL);
-		g_signal_connect (conf, "changed::" SETTINGS_TIME_FORMAT_S, G_CALLBACK (time_format_changed), NULL);
-
 		DbusmenuMenuitem * separator = dbusmenu_menuitem_new();
 		dbusmenu_menuitem_property_set(separator, DBUSMENU_MENUITEM_PROP_TYPE, DBUSMENU_CLIENT_TYPES_SEPARATOR);
 		dbusmenu_menuitem_child_append(root, separator);
@@ -987,51 +442,6 @@
 	return;
 }
 
-static void
-free_appointment_sources (void)
-{
-	g_list_free_full (appointment_sources, g_object_unref);
-	appointment_sources = NULL;
-}
-
-static void
-source_changed_cb (ESource *source __attribute__ ((unused)),
-	           gpointer user_data)
-{
-	update_appointment_menu_items (user_data);
-}
-
-static void
-init_appointment_sources (ESourceRegistry *registry)
-{
-	GList * l;
-
-	appointment_sources = e_source_registry_list_sources (registry, E_SOURCE_EXTENSION_CALENDAR);
-
-	for (l=appointment_sources; l!=NULL; l=l->next)
-		g_signal_connect (G_OBJECT(l->data), "changed", G_CALLBACK (source_changed_cb), NULL);
-}
-
-/* rebuilds both the appointment sources and menu */
-static void
-update_appointments (ESourceRegistry *registry,
-	             ESource *source __attribute__ ((unused)),
-	             gpointer user_data __attribute__ ((unused)))
-{
-	free_appointment_sources ();
-	init_appointment_sources (registry);
-
-	update_appointment_menu_items (NULL);
-}
-
-static void
-source_registry_changed_cb (ESourceRegistry *registry __attribute__ ((unused)),
-	                    ESource *source __attribute__ ((unused)),
-	                    gpointer user_data)
-{
-	update_appointment_menu_items (user_data);
-}
-
 /* Function to build everything up.  Entry point from asm. */
 int
 main (int argc, char ** argv)
@@ -1050,19 +460,6 @@
 	conf = g_settings_new(SETTINGS_INTERFACE);
 	// TODO Add a signal handler to catch other gsettings changes and respond to them
 
-	/* Build our list of appointment calendar sources.
-	   When a source changes, update our menu items.
-	   When sources are added or removed, update our list and menu items. */
-	source_registry = e_source_registry_new_sync (NULL, NULL);
-	g_object_connect (source_registry,
-	                  "signal::source-added", G_CALLBACK (update_appointments), NULL,
-	                  "signal::source-removed", G_CALLBACK (update_appointments), NULL,
-	                  "signal::source-changed", G_CALLBACK (source_registry_changed_cb), NULL,
-	                  "signal::source-disabled", G_CALLBACK (source_registry_changed_cb), NULL,
-	                  "signal::source-enabled", G_CALLBACK (source_registry_changed_cb), NULL,
-	                  NULL);
-	init_appointment_sources (source_registry);
-
 	/* Building the base menu */
 	server = dbusmenu_server_new(MENU_OBJ);
 	root = dbusmenu_menuitem_new();
@@ -1099,14 +496,11 @@
 	mainloop = g_main_loop_new(NULL, FALSE);
 	g_main_loop_run(mainloop);
 
-	free_appointment_sources();
-
 	g_object_unref(G_OBJECT(conf));
 	g_object_unref(G_OBJECT(dbus));
 	g_object_unref(G_OBJECT(service));
 	g_object_unref(G_OBJECT(server));
 	g_object_unref(G_OBJECT(root));
-	g_object_unref(G_OBJECT(source_registry));
 
 	icaltimezone_free_builtin_timezones();
 
--- a/src/dbus-shared.h
+++ b/src/dbus-shared.h
@@ -31,11 +31,6 @@
 
 #define CALENDAR_MENUITEM_PROP_MARKS       "calendar-marks"
 
-#define APPOINTMENT_MENUITEM_TYPE          "appointment-item"	
-#define APPOINTMENT_MENUITEM_PROP_LABEL    "appointment-label"
-#define APPOINTMENT_MENUITEM_PROP_ICON     "appointment-icon"
-#define APPOINTMENT_MENUITEM_PROP_RIGHT    "appointment-time"
-
 #define TIMEZONE_MENUITEM_TYPE             "timezone-item"	
 #define TIMEZONE_MENUITEM_PROP_ZONE        "timezone-zone"	
 #define TIMEZONE_MENUITEM_PROP_RADIO       "timezone-radio"
--- a/src/indicator-datetime.c
+++ b/src/indicator-datetime.c
@@ -174,7 +174,6 @@
 static gint generate_strftime_bitmask     (const char *time_str);
 static void timezone_update_labels        (indicator_item_t * mi_data);
 static gboolean new_calendar_item         (DbusmenuMenuitem * newitem, DbusmenuMenuitem * parent, DbusmenuClient   * client, gpointer user_data);
-static gboolean new_appointment_item      (DbusmenuMenuitem * newitem, DbusmenuMenuitem * parent, DbusmenuClient * client, gpointer user_data);
 static gboolean new_timezone_item         (DbusmenuMenuitem * newitem, DbusmenuMenuitem * parent, DbusmenuClient   * client, gpointer user_data);
 
 /* Indicator Module Config */
@@ -384,7 +383,6 @@
 	
 	DbusmenuGtkClient *client = dbusmenu_gtkmenu_get_client(self->priv->menu);
 	dbusmenu_client_add_type_handler_full(DBUSMENU_CLIENT(client), DBUSMENU_CALENDAR_MENUITEM_TYPE, new_calendar_item, self, NULL);
-	dbusmenu_client_add_type_handler_full(DBUSMENU_CLIENT(client), APPOINTMENT_MENUITEM_TYPE, new_appointment_item, self, NULL);
 	dbusmenu_client_add_type_handler_full(DBUSMENU_CLIENT(client), TIMEZONE_MENUITEM_TYPE, new_timezone_item, self, NULL);
 
 	self->priv->service_proxy_cancel = g_cancellable_new();
@@ -1142,41 +1140,7 @@
 static void
 indicator_prop_change_cb (DbusmenuMenuitem * mi, gchar * prop, GVariant *value, indicator_item_t * mi_data)
 {
-	if (!g_strcmp0(prop, APPOINTMENT_MENUITEM_PROP_LABEL)) {
-		/* Set the main label */
-		gtk_label_set_text(GTK_LABEL(mi_data->label), g_variant_get_string(value, NULL));
-	} else if (!g_strcmp0(prop, APPOINTMENT_MENUITEM_PROP_RIGHT)) {
-		/* Set the right label */
-		gtk_label_set_text(GTK_LABEL(mi_data->right), g_variant_get_string(value, NULL));
-	} else if (!g_strcmp0(prop, APPOINTMENT_MENUITEM_PROP_ICON)) {
-		/* We don't use the value here, which is probably less efficient, 
-		   but it's easier to use the easy function.  And since th value
-		   is already cached, shouldn't be a big deal really.  */
-		GdkPixbuf * pixbuf = dbusmenu_menuitem_property_get_image(mi, APPOINTMENT_MENUITEM_PROP_ICON);
-		if (pixbuf != NULL) {
-			/* If we've got a pixbuf we need to make sure it's of a reasonable
-			   size to fit in the menu.  If not, rescale it. */
-			GdkPixbuf * resized_pixbuf;
-			gint width, height;
-			gtk_icon_size_lookup(GTK_ICON_SIZE_MENU, &width, &height);
-			if (gdk_pixbuf_get_width(pixbuf) > width ||
-					gdk_pixbuf_get_height(pixbuf) > height) {
-				g_debug("Resizing icon from %dx%d to %dx%d", gdk_pixbuf_get_width(pixbuf), gdk_pixbuf_get_height(pixbuf), width, height);
-				resized_pixbuf = gdk_pixbuf_scale_simple(pixbuf,
-				                                         width,
-				                                         height,
-				                                         GDK_INTERP_BILINEAR);
-			} else {
-				g_debug("Happy with icon sized %dx%d", gdk_pixbuf_get_width(pixbuf), gdk_pixbuf_get_height(pixbuf));
-				resized_pixbuf = pixbuf;
-			}
-			gtk_image_set_from_pixbuf(GTK_IMAGE(mi_data->icon), resized_pixbuf);
-			/* The other pixbuf should be free'd by the dbusmenu. */
-			if (resized_pixbuf != pixbuf) {
-				g_object_unref(resized_pixbuf);
-			}
-		}
-	} else if (!g_strcmp0(prop, TIMEZONE_MENUITEM_PROP_ZONE)) {
+	if (!g_strcmp0(prop, TIMEZONE_MENUITEM_PROP_ZONE)) {
 		timezone_update_labels(mi_data);
 	} else if (!g_strcmp0(prop, TIMEZONE_MENUITEM_PROP_RADIO)) {
 		gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(mi_data->gmi), g_variant_get_boolean(value));
@@ -1209,90 +1173,6 @@
 	return;
 }
 
-/* We have a small little menuitem type that handles all
-   of the fun stuff for indicators.  Mostly this is the
-   shifting over and putting the icon in with some right
-   side text that'll be determined by the service.  
-   Copied verbatim from an old revision (including comments) of indicator-messages   
-*/
-static gboolean
-new_appointment_item (DbusmenuMenuitem * newitem, DbusmenuMenuitem * parent, DbusmenuClient * client, gpointer user_data)
-{
-	g_return_val_if_fail(DBUSMENU_IS_MENUITEM(newitem), FALSE);
-	g_return_val_if_fail(DBUSMENU_IS_GTKCLIENT(client), FALSE);
-	g_return_val_if_fail(IS_INDICATOR_DATETIME(user_data), FALSE);
-	/* Note: not checking parent, it's reasonable for it to be NULL */
-	IndicatorDatetime * self = INDICATOR_DATETIME(user_data);
-
-	indicator_item_t * mi_data = g_new0(indicator_item_t, 1);
-
-	mi_data->gmi = gtk_menu_item_new();
-
-	GtkWidget * hbox = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 4);
-
-	/* Icon, probably someone's face or avatar on an IM */
-	mi_data->icon = gtk_image_new();
-	GdkPixbuf * pixbuf = dbusmenu_menuitem_property_get_image(newitem, APPOINTMENT_MENUITEM_PROP_ICON);
-
-	if (pixbuf != NULL) {
-		/* If we've got a pixbuf we need to make sure it's of a reasonable
-		   size to fit in the menu.  If not, rescale it. */
-		GdkPixbuf * resized_pixbuf;
-		gint width, height;
-		gtk_icon_size_lookup(GTK_ICON_SIZE_MENU, &width, &height);
-		if (gdk_pixbuf_get_width(pixbuf) > width ||
-		        gdk_pixbuf_get_height(pixbuf) > height) {
-			g_debug("Resizing icon from %dx%d to %dx%d", gdk_pixbuf_get_width(pixbuf), gdk_pixbuf_get_height(pixbuf), width, height);
-			resized_pixbuf = gdk_pixbuf_scale_simple(pixbuf,
-			                                         width,
-			                                         height,
-			                                         GDK_INTERP_BILINEAR);
-		} else {
-			g_debug("Happy with icon sized %dx%d", gdk_pixbuf_get_width(pixbuf), gdk_pixbuf_get_height(pixbuf));
-			resized_pixbuf = pixbuf;
-		}
-  
-		gtk_image_set_from_pixbuf(GTK_IMAGE(mi_data->icon), resized_pixbuf);
-
-		/* The other pixbuf should be free'd by the dbusmenu. */
-		if (resized_pixbuf != pixbuf) {
-			g_object_unref(resized_pixbuf);
-		}
-	}
-	gtk_misc_set_alignment(GTK_MISC(mi_data->icon), 0.0, 0.5);
-	gtk_box_pack_start(GTK_BOX(hbox), mi_data->icon, FALSE, FALSE, 0);
-	gtk_widget_show(mi_data->icon);
-
-	/* Label, probably a username, chat room or mailbox name */
-	mi_data->label = gtk_label_new(dbusmenu_menuitem_property_get(newitem, APPOINTMENT_MENUITEM_PROP_LABEL));
-	gtk_misc_set_alignment(GTK_MISC(mi_data->label), 0.0, 0.5);
-	
-	GtkStyle * style = gtk_widget_get_style(GTK_WIDGET(mi_data->label));
-	PangoContext * context = gtk_widget_get_pango_context(GTK_WIDGET(mi_data->label));
-	gint length = measure_string(style, context, "MMMMMMMMMMMMMMM"); // 15 char wide string max
-	gtk_widget_set_size_request(GTK_WIDGET(mi_data->label), length, -1); // Set the min size in pixels
-	
-	gtk_label_set_ellipsize(GTK_LABEL(mi_data->label), PANGO_ELLIPSIZE_END);
-	gtk_box_pack_start(GTK_BOX(hbox), mi_data->label, TRUE, TRUE, 0);
-	gtk_widget_show(mi_data->label);
-
-	/* Usually either the time or the count on the individual
-	   item. */
-	mi_data->right = gtk_label_new(dbusmenu_menuitem_property_get(newitem, APPOINTMENT_MENUITEM_PROP_RIGHT));
-	gtk_size_group_add_widget(self->priv->indicator_right_group, mi_data->right);
-	gtk_misc_set_alignment(GTK_MISC(mi_data->right), 1.0, 0.5);
-	gtk_box_pack_start(GTK_BOX(hbox), mi_data->right, FALSE, FALSE, 0);
-	gtk_widget_show(mi_data->right);
-
-	gtk_container_add(GTK_CONTAINER(mi_data->gmi), hbox);
-	gtk_widget_show(hbox);
-
-	dbusmenu_gtkclient_newitem_base(DBUSMENU_GTKCLIENT(client), newitem, GTK_MENU_ITEM(mi_data->gmi), parent);
-
-	g_signal_connect(G_OBJECT(newitem), DBUSMENU_MENUITEM_SIGNAL_PROPERTY_CHANGED, G_CALLBACK(indicator_prop_change_cb), mi_data);
-	return TRUE;
-}
-
 static void
 month_changed_cb (IdoCalendarMenuItem *ido, 
                   gpointer        user_data) 
@@ -1329,24 +1209,6 @@
 	dbusmenu_menuitem_handle_event(DBUSMENU_MENUITEM(item), "day-selected", variant, timestamp);
 }
 
-static void
-day_selected_double_click_cb (IdoCalendarMenuItem *ido,
-                              gpointer        user_data) 
-{
-	guint d,m,y;
-	DbusmenuMenuitem * item = DBUSMENU_MENUITEM (user_data);
-	ido_calendar_menu_item_get_date(ido, &y, &m, &d);
-	struct tm date = {0};
-	date.tm_mday = d;
-	date.tm_mon = m;
-	date.tm_year = y - 1900;
-	guint selecteddate = (guint)mktime(&date);
-	g_debug("Got day selected double click signal: %s", asctime(&date));
-	GVariant *variant = g_variant_new_uint32(selecteddate);
-	guint timestamp = (guint)time(NULL);
-	dbusmenu_menuitem_handle_event(DBUSMENU_MENUITEM(item), "day-selected-double-click", variant, timestamp);
-}
-
 static gboolean
 new_calendar_item (DbusmenuMenuitem * newitem,
 				   DbusmenuMenuitem * parent,
@@ -1377,7 +1239,6 @@
 
 	g_signal_connect_after(ido, "month-changed", G_CALLBACK(month_changed_cb), (gpointer)newitem);
 	g_signal_connect_after(ido, "day-selected", G_CALLBACK(day_selected_cb), (gpointer)newitem);
-	g_signal_connect_after(ido, "day-selected-double-click", G_CALLBACK(day_selected_double_click_cb), (gpointer)newitem);
 
 	g_signal_connect(G_OBJECT(newitem), DBUSMENU_MENUITEM_SIGNAL_PROPERTY_CHANGED, G_CALLBACK(calendar_prop_change_cb), ido);
 
--- a/src/settings-shared.h
+++ b/src/settings-shared.h
@@ -31,7 +31,6 @@
 #define SETTINGS_CUSTOM_TIME_FORMAT_S   "custom-time-format"
 #define SETTINGS_SHOW_CALENDAR_S        "show-calendar"
 #define SETTINGS_SHOW_WEEK_NUMBERS_S    "show-week-numbers"
-#define SETTINGS_SHOW_EVENTS_S          "show-events"
 
 enum {
 	SETTINGS_TIME_LOCALE = 0,
